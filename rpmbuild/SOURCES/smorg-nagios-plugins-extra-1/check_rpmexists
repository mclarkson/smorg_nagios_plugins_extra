#!/bin/bash
# Copyright(C) 2013 Mark Clarkson <mark.clarkson@smorg.co.uk>
#
#    This software is provided under the terms of the GNU
#    General Public License (GPL), as published at: 
#    http://www.gnu.org/licenses/gpl.html .
#
# File:     check_rpmversion
# Date:     23 Nov 2015
# Version:  0.10
# Modified: xx Jun 2015 by Mark Clarkson <mark.clarkson@smorg.co.uk>
#             Sample
#
# Purpose:  Check version of an installed RPM.
#
# Notes:
#


# ---------------------------------------------------------------------------
# DEFAULTS (Change as necessary)
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# DON'T TOUCH ANYTHING BELOW
# ---------------------------------------------------------------------------

ME="$0"
CMDLINE="$@"
TRUE=1
FALSE=0
VERSION="0.10"
OK=0
WARN=1
CRIT=2
UNKN=3

USESUDO=0
WITHPERF=0
SUDO="sudo "

declare -i PERCENT=0 USESUDO=0 WITHPERF=0
declare -i CRITLVL=90 WARNLVL=50
declare -i N=0
declare -a FILE FOUND

# ---------------------------------------------------------------------------
main()
# ---------------------------------------------------------------------------
{
    local retval txt msg

    retval=$OK

    parse_options "$@"

    sanity_checks

    # Fill in the stats variables 
    do_check

    txt="OK:"
    s="s"
    [[ $N -eq 0 ]] && s=""
    msg="$((N+1)) RPM$s found"
    files=""

    for i in `seq 0 $N`; do
        if [[ ${FOUND[i]} -eq 0 ]]; then
            txt="CRITICAL:"
            msg="RPM(s) not found:"
            files+=" ${FILE[i]}"
            retval=$CRIT
        fi
    done

    out="$txt $msg$files"

    [[ $WITHPERF -eq 1 ]] && {
        out="$out | 'Slab %'=$PERCENT%;$WARNLVL;$CRITLVL;;"
    }

    echo "$out"

    exit $retval
}

# ---------------------------------------------------------------------------
sanity_checks()
# ---------------------------------------------------------------------------
{
    [[ $WARNLVL -gt $CRITLVL ]] && {
        usage
        echo "ERROR: The warning level is greater than the critical level."
        exit 0
    }
}

# ----------------------------------------------------------------------------
usage()
# ----------------------------------------------------------------------------
{
    echo
    echo "`basename $ME` - Alert if Slab usage is high."
    echo
    echo "Usage: `basename $ME` [options] VER [VER]..."
    echo
    echo " -h      :  Display this help text."
    echo
    echo "Example:"
    echo
    echo "  Check that Slab does not exceed 50% or 90% of RAM"
    echo
    echo "    ./`basename $ME`"
    echo
}

# ---------------------------------------------------------------------------
do_check()
# ---------------------------------------------------------------------------
{
    local -i found=0

    for i in `seq 0 $N`; do
        FOUND[i]=1
        rpm -q ${FILE[i]} &>/dev/null
        [[ $? -ne 0 ]] && FOUND[i]=0
    done
}

# ----------------------------------------------------------------------------
parse_options()
# ----------------------------------------------------------------------------
# Purpose:      Parse program options and set globals.
# Arguments:    None
# Returns:      Nothing
{
    set -- "$@"
    while true
    do
        case "$1" in
            -h) usage
                exit 0
            ;;
            ?*) FILE[N]="$1"
            ;;
        esac
        shift 1 || break
        N+=1
    done
    N=N-1
}

main "$@"

exit 0

